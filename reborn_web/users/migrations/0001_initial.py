# Generated by Django 3.0.1 on 2019-12-27 12:15

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userID', models.CharField(max_length=32, unique=True, verbose_name='id')),
                ('password', models.CharField(max_length=64, verbose_name='password')),
                ('email', models.EmailField(max_length=128, unique=True, verbose_name='e-mail')),
                ('hp', models.IntegerField(blank=True, max_length=18, unique=True, verbose_name='phone')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='name')),
                ('studentID', models.IntegerField(blank=True, max_length=10, unique=True, verbose_name='studentID')),
                ('state', models.CharField(blank=True, choices=[('1', '1학년'), ('2', '2힉년'), ('3', '3학년'), ('4', '4학년'), ('졸업', '졸업생')], max_length=18)),
                ('level', models.CharField(choices=[('1', '1_EveryOne'), ('2', '2_Certified Member'), ('3', '3_Manager'), ('4', '4_Supervisor')], default=1, max_length=18)),
                ('registered_date', models.DateTimeField(auto_now_add=True, verbose_name='registered_Date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자',
                'db_table': '회원목록',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
